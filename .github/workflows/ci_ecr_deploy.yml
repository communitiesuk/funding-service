name: Deploy from CI ECR
run-name: Deploy ${{ github.ref_name }} to ${{ github.event.inputs.environment }}

permissions:
  contents: read
  id-token: write  # For OIDC auth to AWS

on:
  workflow_call:
    inputs:
      environment:
        description: "AWS environment to deploy to."
        type: string
        required: true
        default: dev
      ecr_image_location:
        description: "Image URI in CI ECR to deploy"
        type: string
        required: true
      run_e2e_tests:
        description: "Run end-to-end tests?"
        type: boolean
        default: true
        required: true
    secrets:
      AWS_ACCOUNT:
        required: true
      SLACK_BOT_TOKEN:
        required: true
      TEMP_SLACK_CHANNEL_ID:
        required: true
      SERVICE_ACCOUNT_USERNAME:
        required: true
      SERVICE_ACCOUNT_PASSWORD:
        required: true

jobs:
  deploy:
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    name: Deploy from CI ECR

    steps:
      - name: Get current date
        id: currentdatetime
        run: echo "datetime=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT }}:role/GithubCopilotDeploy
          role-session-name: "funding-service_deploy_${{ inputs.environment }}_${{ steps.currentdatetime.outputs.datetime }}"
          aws-region: eu-west-2

      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Check for migrations
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            alembic-head:
              - 'app/common/data/migrations/.current-alembic-head'

      - name: Run Database Migrations
        if: steps.changes.outputs.alembic-head == 'true'
        uses: ./.github/workflows/run-database-migrations

      # - name: Deploy image to App Runner
      #   id: deploy
      #   uses: awslabs/amazon-app-runner-deploy@v2.5.2
      #   with:
      #     service: ${{ inputs.environment }}-funding-service
      #     image: ${{ inputs.ecr_image_location }}
      #     image_repository_type: ECR
      #     access-role-arn: arn:aws:iam::${{ secrets.AWS_ACCOUNT }}:role/${{ inputs.environment }}-funding-service-app-runner-build-role
      #     region: eu-west-2
      #     port: 8080
      #     cpu: 1
      #     memory: 2
      #     wait-for-service-stability-seconds: 600
      - name: Get App Runner service ARN
        id: get_service_arn
        run: |
          SERVICE_ARN=$(aws apprunner list-services \
            --region eu-west-2 \
            --query "ServiceSummaryList[?ServiceName=='${{ inputs.environment }}-funding-service'].ServiceArn" \
            --output text)
          echo "SERVICE_ARN=$SERVICE_ARN" >> $GITHUB_OUTPUT


      - name: Deploy image to App Runner
        run: |
          aws apprunner update-service \
          --service-arn arn:aws:apprunner:eu-west-2:${{ secrets.AWS_ACCOUNT }}:service/${{ inputs.environment }}-funding-service/<service-id> \
          --source-configuration '{
            "ImageRepository": {
              "ImageIdentifier": "${{ inputs.ecr_image_location }}",
              "ImageRepositoryType": "ECR",
              "ImageConfiguration": {
                "Port": "8080"
              }
            },
            "AutoDeploymentsEnabled": true
          }'
        env:
          AWS_REGION: eu-west-2

  e2e_tests:
    name: Python E2E tests
    if: ${{ inputs.run_e2e_tests == true }}
    needs: [deploy]
    uses: ./.github/workflows/run_e2e_tests.yml
    with:
      environment: ${{ inputs.environment }}
    secrets:
      AWS_ACCOUNT: ${{ secrets.AWS_ACCOUNT }}
      SERVICE_ACCOUNT_USERNAME: ${{ secrets.SERVICE_ACCOUNT_USERNAME }}
      SERVICE_ACCOUNT_PASSWORD: ${{ secrets.SERVICE_ACCOUNT_PASSWORD }}

  notify_slack:
    needs: [deploy, e2e_tests]
    if: ${{ always() && (needs.deploy.result == 'failure' || needs.e2e_tests.result == 'failure') && github.ref_name == 'main' }}
    uses: communitiesuk/funding-service-design-workflows/.github/workflows/notify-slack-deployment-failed.yml@main
    with:
      app_name: FS Deploy CI ECR
      env_name: ${{ inputs.environment }}
      github_username: ${{ github.actor }}
      workflow_url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
      compare_url: ${{ github.event_name == 'push' && github.event.compare || null }}
    secrets:
      SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      SLACK_NOTIFICATION_CHANNEL_ID: ${{ secrets.TEMP_SLACK_CHANNEL_ID }}

