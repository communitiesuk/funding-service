name: Deploy
run-name: Deploy ${{ github.ref_name }} to ${{ github.event.inputs.environment }}

permissions:
  contents: read  # This is required for actions/checkout
  id-token: write  # This is required for authenticating with aws

on:
  workflow_call:
    inputs:
      environment:
        description: "AWS environment to deploy to."
        type: string
        required: true
        default: dev
      run_e2e_tests:
          description: "Run end-to-end tests?"
          type: boolean
          default: true
          required: true
    secrets:
      AWS_ACCOUNT:
        required: true
      CI_AWS_ACCOUNT:
        required: true
      SLACK_BOT_TOKEN:
        required: true
      TEMP_SLACK_CHANNEL_ID:
        required: true
      SERVICE_ACCOUNT_USERNAME:
          required: true
      SERVICE_ACCOUNT_PASSWORD:
          required: true

jobs:
  deploy:
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    name: Deploy

    steps:
      - name: Get current date
        shell: bash
        id: currentdatetime
        run: echo "datetime=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@00943011d9042930efac3dcd3a170e4273319bc8 # v5
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT }}:role/GithubCopilotDeploy
          role-session-name: "funding-service_deploy_${{ inputs.environment }}_${{ steps.currentdatetime.outputs.datetime }}"
          aws-region: eu-west-2

      - name: Checkout repo
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Set ECR repo variable and construct image URI
        id: ecr_info
        run: |
          # Set ECR repo based on account and environment
          ECR_REPO=${{ secrets.CI_AWS_ACCOUNT }}.dkr.ecr.eu-west-2.amazonaws.com/funding-service-ci-shared-app
          # Construct final image URI using provided image tag
          ECR_IMAGE_LOCATION=$ECR_REPO:${{ github.sha }}

          echo "ecr_image_location=$ECR_IMAGE_LOCATION" >> $GITHUB_OUTPUT

      - name: Update ECS image location
        run: ./scripts/update-ecs-task-image.py "${{ steps.ecr_info.outputs.ecr_image_location }}"

      - name: Read current alembic head
        id: alembic_head
        run: |
          ALEMBIC_HEAD=$(cat app/common/data/migrations/.current-alembic-head)
          echo "alembic_head=$ALEMBIC_HEAD" >> $GITHUB_OUTPUT

      - name: Run Database Migrations
        uses: ./.github/workflows/run-database-migrations

      - name: Deploy image to App Runner
        id: deploy
        uses: awslabs/amazon-app-runner-deploy@main
        with:
          service: ${{ inputs.environment }}-funding-service
          image: ${{ steps.ecr_info.outputs.ecr_image_location }}
          access-role-arn: arn:aws:iam::${{ secrets.AWS_ACCOUNT }}:role/${{ inputs.environment }}-funding-service-app-runner-build-role
          region: eu-west-2
          port: 8080
          cpu: 1
          memory: 2
          wait-for-service-stability-seconds: 600

  e2e_tests:
    name: Python E2E tests
    if: ${{ inputs.run_e2e_tests == true }}
    needs: [deploy]
    uses: ./.github/workflows/run_e2e_tests.yml
    with:
      environment: ${{ inputs.environment }}
    secrets:
      AWS_ACCOUNT: ${{ secrets.AWS_ACCOUNT }}
      SERVICE_ACCOUNT_USERNAME: ${{ secrets.SERVICE_ACCOUNT_USERNAME }}
      SERVICE_ACCOUNT_PASSWORD: ${{ secrets.SERVICE_ACCOUNT_PASSWORD }}

  notify_slack:
    needs: [deploy, e2e_tests]
    if: ${{ always() && (needs.deploy.result == 'failure' || needs.e2e_tests.result == 'failure') && github.ref_name == 'main' }}
    uses: communitiesuk/funding-service-design-workflows/.github/workflows/notify-slack-deployment-failed.yml@main
    with:
      app_name: FS Deploy CI ECR
      env_name: ${{ inputs.environment }}
      github_username: ${{ github.actor }}
      workflow_url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
      compare_url: ${{ github.event_name == 'push' && github.event.compare || null }}
    secrets:
      SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      SLACK_NOTIFICATION_CHANNEL_ID: ${{ secrets.TEMP_SLACK_CHANNEL_ID }}
