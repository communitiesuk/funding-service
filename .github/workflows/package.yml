name: Paketo build
run-name: Build ${{github.ref_name}}

permissions:
  packages: write
  contents: read  # This is required for actions/checkout
  id-token: write  # This is required for authenticating with aws

on:
  workflow_call:
    secrets:
      AWS_ACCOUNT:
        required: true
      SLACK_BOT_TOKEN:
        required: true
      TEMP_SLACK_CHANNEL_ID:
        required: true
      CI_AWS_ACCOUNT:
        required: true
    outputs:
      ghcr_image_location:
        description: "A URI pointing to the paketo-built image"
        value: ${{ jobs.paketo_build.outputs.ghcr_image_location }}
      ecr_image_location:
        description: "A URI pointing to the paketo-built image in ECR"
        value: ${{ jobs.paketo_build.outputs.ecr_image_location }}

jobs:
  paketo_build:
    runs-on: ubuntu-latest
    name: Paketo
    outputs:
      ghcr_image_location: ${{ steps.export_uris.outputs.ghcr_image_location }}
      ecr_image_location: ${{ steps.export_uris.outputs.ecr_image_location }}

    steps:
      - uses: buildpacks/github-actions/setup-pack@v5.9.2
      - uses: actions/checkout@v4

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.CI_AWS_ACCOUNT }}:role/terraform-developer
          aws-region: eu-west-2  # adjust as needed

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.13.5

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: install dependencies
        run: uv sync

      - name: vite
        run: |
          npm ci
          npm run build

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and publish to GHCR
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository }}
          VERSION=${{ github.sha }}
          GHCR_IMAGE_LOCATION="$IMAGE_ID:$VERSION"
          LATEST_TAG=""
          if [ "${{ github.ref_name }}" == "main" ]; then
            LATEST_TAG="--tag $IMAGE_ID:latest"
          fi

          uv export --format requirements-txt --no-hashes > requirements.txt

          pack build "$GHCR_IMAGE_LOCATION" $LATEST_TAG \
            --builder paketobuildpacks/builder-jammy-full \
            --publish

      - name: Build and publish to ECR
        id: build_and_publish
        run: |
          AWS_ACCOUNT_ID=${{ secrets.CI_AWS_ACCOUNT}}
          AWS_REGION="eu-west-2"
          REPO_NAME="funding-service-ci-shared-app"
          IMAGE_TAG=${{ github.sha }}

          ECR_IMAGE_URI="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$REPO_NAME:$IMAGE_TAG"
          echo "::add-mask::$ECR_IMAGE_URI"

          LATEST_TAG=""
          if [ "${{ github.ref_name }}" == "main" ]; then
            LATEST_TAG="--tag $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$REPO_NAME:latest"
          fi

          uv export --format requirements-txt --no-hashes > requirements.txt

          pack build "$ECR_IMAGE_URI" $LATEST_TAG \
            --builder paketobuildpacks/builder-jammy-full \
            --publish

      - name: Export image URIs
        id: export_uris
        run: |
          GHCR_IMAGE_URI="ghcr.io/${{ github.repository }}:${{ github.sha }}"
          ECR_IMAGE_URI="${{ secrets.CI_AWS_ACCOUNT }}.dkr.ecr.eu-west-2.amazonaws.com/funding-service-ci-shared-app:${{ github.sha }}"

          echo "::add-mask::$ECR_IMAGE_URI"
          echo "ghcr_image_location=$GHCR_IMAGE_URI" >> $GITHUB_OUTPUT
          echo "ecr_image_location=$ECR_IMAGE_URI" >> $GITHUB_OUTPUT

  notify_slack:
      needs:
        - paketo_build
      if: ${{ always() && needs.paketo_build.result == 'failure' && github.ref_name == 'main'}}
      uses: communitiesuk/funding-service-design-workflows/.github/workflows/notify-slack-deployment-failed.yml@main
      with:
        app_name: FS Paketo
        env_name: 'build'
        github_username: ${{ github.actor }}
        workflow_url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        compare_url: ${{ github.event_name == 'push' && github.event.compare || null }}
      secrets:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        SLACK_NOTIFICATION_CHANNEL_ID: ${{ secrets.TEMP_SLACK_CHANNEL_ID }}
