"""empty message

Revision ID: 019_spike_groups
Revises: 018_add_url_type
Create Date: 2025-07-21 09:17:39.974177

"""

import sqlalchemy as sa
from alembic import op
from alembic_postgresql_enum import TableReference
from sqlalchemy.dialects import postgresql

revision = "019_spike_groups"
down_revision = "018_add_url_type"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    sa.Enum("QUESTION", "GROUP", name="question_type_enum").create(op.get_bind())
    with op.batch_alter_table("question", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column(
                "type",
                postgresql.ENUM("QUESTION", "GROUP", name="question_type_enum", create_type=False),
                nullable=True,
            )
        )
        batch_op.add_column(sa.Column("parent_id", sa.Uuid(), nullable=True))
        batch_op.add_column(sa.Column("context", postgresql.JSONB(astext_type=sa.Text()), nullable=True))
        batch_op.alter_column("form_id", existing_type=sa.UUID(), nullable=True)
        batch_op.drop_constraint("uq_question_order_form", type_="unique")
        batch_op.create_unique_constraint("uq_question_order_form", ["order", "parent_id", "form_id"], deferrable=True)
        batch_op.create_foreign_key(batch_op.f("fk_question_parent_id_question"), "question", ["parent_id"], ["id"])

    op.execute("UPDATE question SET type = 'QUESTION'")
    op.execute("UPDATE question SET context = '{}'")
    op.alter_column("question", "type", nullable=False)
    op.alter_column("question", "context", nullable=False)

    op.sync_enum_values(
        enum_schema="public",
        enum_name="question_data_type_enum",
        new_values=["EMAIL", "URL", "TEXT_SINGLE_LINE", "TEXT_MULTI_LINE", "INTEGER", "YES_NO", "RADIOS", "PAGE"],
        affected_columns=[TableReference(table_schema="public", table_name="question", column_name="data_type")],
        enum_values_to_rename=[],
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.sync_enum_values(
        enum_schema="public",
        enum_name="question_data_type_enum",
        new_values=["EMAIL", "URL", "TEXT_SINGLE_LINE", "TEXT_MULTI_LINE", "INTEGER", "YES_NO", "RADIOS"],
        affected_columns=[TableReference(table_schema="public", table_name="question", column_name="data_type")],
        enum_values_to_rename=[],
    )
    with op.batch_alter_table("question", schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f("fk_question_parent_id_question"), type_="foreignkey")
        batch_op.drop_constraint("uq_question_order_form", type_="unique")
        batch_op.create_unique_constraint(
            "uq_question_order_form", ["order", "form_id"], postgresql_nulls_not_distinct=False
        )
        batch_op.alter_column("form_id", existing_type=sa.UUID(), nullable=False)
        batch_op.drop_column("context")
        batch_op.drop_column("parent_id")
        batch_op.drop_column("type")

    sa.Enum("QUESTION", "GROUP", name="question_type_enum").drop(op.get_bind())
    # ### end Alembic commands ###
