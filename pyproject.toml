[project]
name = "funding-service"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
# If updating the version here, also update in project.toml, .python-version, Dockerfile
requires-python = "==3.13.7"
dependencies = [
    "alembic-utils==0.8.8",
    "alembic-postgresql-enum==1.8.0",
    "babel==2.17.0",
    "flask==3.1.2",
    "flask-babel==4.0.0",
    "flask-migrate==4.1.0",
    "flask-sqlalchemy-lite==0.1.0",
    "flask-wtf==1.2.2",
    "govuk-frontend-jinja==3.8.0",
    "govuk-frontend-wtf==3.2.0",
    "psycopg==3.2.10",
    "pydantic==2.11.10",
    "pydantic-settings==2.11.0",
    "python-json-logger==4.0.0",
    "sqlalchemy==2.0.43",
    "wtforms[email]==3.2.1",
    "notifications-python-client==10.0.1",
    "flask-talisman==1.1.0",
    "flask-login==0.6.3",
    "sentry-sdk==2.40.0",
    "msal==1.34.0",
    "gunicorn[gevent]==23.0.0",
    "sqlalchemy-json==0.7.0",
    "simpleeval==1.0.3",
    "num2words==0.5.14",
    "mistune==3.1.4",
    "faker==37.8.0",
    "xgovuk-flask-admin==0.0.8",
    "flask-admin==2.0.0rc1",
]

[dependency-groups]
dev = [
    "beautifulsoup4==4.14.2",
    "debugpy==1.8.17",
    "factory-boy==3.3.3",
    "flask-debugtoolbar==0.16.0",
    "mypy==1.18.2",
    "pre-commit==4.3.0",
    "pytest-playwright==0.7.1",
    "pytest-mock==3.15.1",
    "pytest==8.4.2",
    "pytest-env==1.2.0",
    "pytest-fail-slow==0.6.0",
    "pytest-flask==1.3.0",
    "pytest-xdist==3.8.0",
    "responses==0.25.8",
    "ruff==0.13.3",
    "sqlalchemy-utils==0.42.0",
    "testcontainers[postgres]==4.13.2",
    "types-flask-migrate==4.1.0.20250809",
    "types-wtforms==3.2.1.20250809",
    "html5lib==1.1",
    "types-html5lib==1.1.11.20250917",
    "types-pytz==2025.2.0.20250809",
    "boto3==1.40.50",
    "types-boto3==1.40.50",
    "freezegun==1.5.5",
    "import-linter==2.5.2",
    "ty==0.0.1a22",
]

[tool.uv]
required-version = ">=0.8.12"

[tool.ty.terminal]
error-on-warning = true

[tool.ruff]
line-length = 120

target-version = "py313"

[tool.ruff.lint]
select = [
    "E", # pycodestyle
    "W", # pycodestyle
    "F", # pyflakes
    "I", # isort
    "B", # flake8-bugbear
    "C90", # mccabe cyclomatic complexity
    "G", # flake8-logging-format
]
ignore = []
exclude = [
    ".venv*",
    "__pycache__",
]
mccabe.max-complexity = 12


[tool.importlinter]
root_package = "app"
include_external_packages = true
exclude_type_checking_guards = true
exclude_type_checking_imports = true

[[tool.importlinter.contracts]]
name = "Block importing anything from the `developers` package in the rest of the app."
type = "layers"
exhaustive = true
containers = ["app"]
layers = [
    "developers",
    " common : deliver_grant_funding : extensions : healthcheck : services : config : constants : logging : monkeypatch : sentry : types"
]

[[tool.importlinter.contracts]]
name = "DB models should not be used directly by any other parts of the app; queries should go through interfaces instead."
type = "forbidden"
source_modules = [
    "app.common.auth",
    "app.common.helpers",
    "app.common.security",
    "app.common.filters",
    "app.common.utils",
    "app.deliver_grant_funding",
    "app.developers",
    "app.extensions",
    "app.services",
    "app.config",
    "app.constants",
    "app.healthcheck",
    "app.logging",
    "app.monkeypatch",
    "app.sentry",
    "app.types",
]
ignore_imports = [
    "app.developers.commands -> app.common.data.models",
    "app.deliver_grant_funding.admin.entities -> app.common.data.models"
]
# Unable to do `exhaustive` here unfortunately, so we won't get told if new modules are added and we forget to put them
# in here. C'est la vie.
# Importantly we don't block `app.common.data.models_user` because this is used in a lot of places to cast Flask's
# `current_user` to the right thing. Again, alas, not ideal but OK.
forbidden_modules = [
    "app.common.data.models",
]
# Lots of things import interfaces (correctly); interfaces import models; indirect imports therefore must be allowed
allow_indirect_imports = true


[[tool.importlinter.contracts]]
name = "Temporary interfaces are intended for use in the `developers` package only and should not be used directly by any other parts of the app."
type = "forbidden"
source_modules = [
    "app.deliver_grant_funding",
    "app.extensions",
    "app.services",
    "app.config",
    "app.constants",
    "app.healthcheck",
    "app.logging",
    "app.monkeypatch",
    "app.sentry",
    "app.types",
]
# Unable to do `exhaustive` here unfortunately, so we won't get told if new modules are added and we forget to put them
# in here. C'est la vie.
forbidden_modules = [
    "app.common.data.interfaces.temporary",
]



[tool.mypy]
strict = true
# do not validate subclassing any types
disallow_subclassing_any = false
# enforce type checking on fixtures in conftest but not on all test files
packages = ["app", "tests"]
# Exclude actual test files, but include stuff in __init__ or conftest as they are used more widely
exclude = [".*test_.*"]


[[tool.mypy.overrides]]
module = [
    "flask_wtf", "govuk_frontend_wtf.*", "testcontainers.*", "flask_babel", "sqlalchemy_utils", "flask_talisman.*", "flask_login", "msal.*", "num2words", "flask_admin.*", "xgovuk_flask_admin.*"
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = ["app.common.data.migrations.versions.*"]
ignore_errors = true

[[tool.mypy.overrides]]
module = ["factory"]
implicit_reexport = true

[[tool.mypy.overrides]]
module = ["sqlalchemy_json", "simpleeval"]
follow_untyped_imports = true

[tool.pytest.ini_options]
env = [
    "FLASK_ENV=unit_test",
    "DATABASE_URL=postgresql+psycopg://overridden-by-fixture",
    "PGGSSENCMODE=disable" #https://github.com/ged/ruby-pg/issues/538#issuecomment-1591629049
]
markers = [
    "e2e: Run E2E (browser) tests using playwright",
    "authenticate_as: Email address to use for `authenticated_client` (integration) and `authenticated_browser` (e2e)",
    "skip_in_environments: Environment in which this end to end test should be run",
    "freeze_time: Mock all calls to now() in code or database to return the specified date/time"
]

filterwarnings = [
    "error",
    "ignore:Could not insert debug toolbar:UserWarning",
    "ignore:cannot collect test class 'TestConfig' because it has a __init__ constructor:pytest.PytestCollectionWarning",
    "ignore:datetime\\.datetime\\.utcnow\\(\\) is deprecated and scheduled for removal in a future version*:DeprecationWarning",
    "ignore:The @wait_container_is_ready decorator is deprecated and will be removed in a future version.:DeprecationWarning"
]
[tool.ty.src]
include = ["app", "tests"]
exclude = ["tests/**/test_*.py"]
